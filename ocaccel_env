#!/bin/bash
############################################################################
############################################################################
##
## Copyright 2016,2017 International Business Machines
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE#2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions AND
## limitations under the License.
##
############################################################################
############################################################################
#
ocacceldir=$(dirname $(readlink -f "$BASH_SOURCE")) # path containing this script
#echo "ocacceldir is set to $ocacceldir"
PATH=$ocacceldir:$PATH

ocaccel_env_sh=$ocacceldir/ocaccel_env.sh

unset ACTION_ROOT
unset OCSE_ROOT
unset TIMING_LABLIMIT
unset ILA_SETUP_FILE
unset config_script
unset ocaccel_env_info

TIMING_LABLIMIT_DEFAULT="-200"

while [[ $# -gt 0 ]]; do
  case "$1" in
    "config")
      ocaccel_env_info=y
      shift
      ;;
    *)
      config_script=$1
      shift
      ;;
  esac
done

#echo  "======================================================="
if [ -e "$config_script" ]; then
#  echo "Preparation: source $config_script ..."
  source $config_script
fi

if [ -e "$ocaccel_env_sh" ]; then
#  echo "Preparation: source current $ocaccel_env_sh ..."
  source "$ocaccel_env_sh"
else
  touch "$ocaccel_env_sh"
fi

unset SETUP_DONE
while [ -z "$SETUP_DONE" ]; do
  SETUP_WARNING=""
  SETUP_INFO=""
  SETUP_EMPTY=""
  echo  "======================================================="
  echo  "== OCACCEL ENVIRONMENT SETUP                         =="
  echo  "======================================================="


  ####### checking Xilinx Vivado
  if [ ! -d "$XILINX_VIVADO" ]; then
    SETUP_WARNING="$SETUP_WARNING\n### WARNING ### XILINX_VIVADO  (set to  \"$XILINX_VIVADO\") is not pointing to a directory:"
    SETUP_WARNING="$SETUP_WARNING\n    Please source settings64.sh from your Vivado installation"
  fi
  if [ -z "$XILINXD_LICENSE_FILE" ]; then
    SETUP_WARNING="$SETUP_WARNING\n### WARNING ### XILINXD_LICENSE_FILE is not set:"
    SETUP_WARNING="$SETUP_WARNING\n    The following command needs to be executed before initiating hardware builds:"
    SETUP_WARNING="$SETUP_WARNING\n    export XILINXD_LICENSE_FILE=<pointer to Vivado license>"
  fi

  # printing Vivado version
  if [ -z `which vivado 2> /dev/null` ]; then
    SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to vivado is not set:"
    SETUP_WARNING="$SETUP_WARNING\n    Please add to environment variable \$PATH"
  else
    echo  "Path to vivado          is set to: `which vivado`"
    echo  "Vivado version          is set to: `vivado -version|head -n1`"
  fi


  ####### checking path to OCSE (only if simulation is enabled)
  # Note: SIMULATOR is defined via ocaccel_config
  if [ "$SIMULATOR" != "nosim" ]; then
    if [ ! -n "$HDL_UNIT_SIM" ]; then
      echo "=====Simulation setup: Checking path to OCSE=========="

      if [ ! -d "$OCSE_PATH" ]; then
        #Doesn't care OCSE in Unit Sim
           SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to OCSE not set properly."
           SETUP_WARNING="$SETUP_WARNING\n    For simulation please clone OpenCAPI Simulation Environment (OCSE)"
           SETUP_WARNING="$SETUP_WARNING\n    from https://github.com/OpenCAPI/ocse"
           SETUP_WARNING="$SETUP_WARNING\n    and set it int the Kconfig Menu."
           SETUP_WARNING="$SETUP_WARNING\n    Please set Simulator to 'nosim' if you do not intend to run simulation."
        echo "OCSE_ROOT              is set to: \"$OCSE_PATH\""
      else
        abs_OCSE_PATH=$(cd $OCSE_PATH && echo $PWD)
        echo "OCSE_ROOT              is set to: \"$abs_OCSE_PATH\""
      fi
    fi
  fi


  ####### checking path to ACTION_ROOT
  # Note: $ACTION_NAME is defined via ocaccel_config
  echo "=====Action setup: Checking path to ACTION_ROOT======="
  AR=$ocacceldir/actions/$ACTION_NAME

  echo "ACTION_ROOT              is set to: \"$AR\""
  if [ ! -d "$AR" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to ACTION_ROOT doesn't exist. "
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Please make sure the path is valid. "
  fi


  ####### settings for ILA Debug
  # Note: ILA_DEBUG is defined via ocaccel_config
  if [ "$ILA_DEBUG" == "TRUE" ]; then
    echo  "=====ILA Debug setup==================================="
    echo  "ILA_SETUP_FILE          is set to: \"$ILA_SETUP_FILE\""
    RESP=`grep ILA_SETUP_FILE $ocaccel_env_sh`
    if [ -z "$RESP" ]; then
      echo  "export ILA_SETUP_FILE=" >> $ocaccel_env_sh
    fi
    if [ -z "$ILA_SETUP_FILE" ]; then
      #SETUP_EMPTY="$SETUP_EMPTY\n  ILA_SETUP_FILE"
      echo "You can still manually instantiate ila cores in logic design."
    else
      if [ `echo  "$ILA_SETUP_FILE" | tr a-z A-Z` = "TRUE" ] && [ ! -e "$ILA_SETUP_FILE" ]; then
        SETUP_WARNING="$SETUP_WARNING\n### WARNING ### ILA_DEBUG is set to $ILA_DEBUG but ILA_SETUP_FILE (set to \"$ILA_SETUP_FILE\") is not pointing to a file!"
      fi
    fi
  fi


  ####### checking TIMNG LIMITS setup
  if [ -z "$TIMING_LABLIMIT" ]; then
    TIMING_LABLIMIT="$TIMING_LABLIMIT_DEFAULT"
    sed -i '/export[ ^]*TIMING_LABLIMIT[ ^]*=/ d' $ocaccel_env_sh
    { echo  "export TIMING_LABLIMIT=\"$TIMING_LABLIMIT_DEFAULT\""; cat $ocaccel_env_sh; } > $ocaccel_env_sh.tmp && mv $ocaccel_env_sh.tmp $ocaccel_env_sh
    SETUP_INFO="$SETUP_INFO\n### INFO ### Timing limit for FPGA image build got set to default value $TIMING_LABLIMIT_DEFAULT"
  fi
  echo  "=====Timing limit for FPGA image build in ps==========="
  echo  "TIMING_LABLIMIT         is set to: \"$TIMING_LABLIMIT\""


  ####### Cadence simulation setup:
  # Note: SIMULATOR is defined via ocaccel_config
  if [ "$SIMULATOR" == "xcelium" ]; then
    echo  "=====Cadence simulation setup=========================="

    if [ -z `which xrun 2> /dev/null` ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Path to xrun not set, Cadence simulation won't work"
    else
      echo  "Path to xrun                   is: \"`which xrun`\""
      # checking version
      echo  "xrun version                   is: \"$(xrun -version| cut -f 3)\""
      if [ -z "$CDS_INST_DIR" ]; then
        SETUP_WARNING="$SETUP_WARNING\n### WARNING ### SIMULATOR is $SIMULATOR but CDS_INST_DIR is not set. Simulation may not work."
      fi
      echo  "CDS_INST_DIR            is set to: \"$CDS_INST_DIR\""
    fi
    if [ -f "$IES_LIBS/cds.lib" ]; then
      echo  "cds.lib (IES_LIBS)       found in: \"$IES_LIBS\""
    else
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cannot find cds.lib in IES_LIBS=$IES_LIBS. Cadence compilation won't work."
    fi
    if [ -z "$CDS_LIC_FILE" ] && [ -z "$LM_LICENSE_FILE" ]; then
      SETUP_WARNING="$SETUP_WARNING\n### WARNING ### Cadence license not defined with CDS_LIC_FILE or LM_LICENSE_FILE. Simulation may not work."
    else
      if [ -n "$CDS_LIC_FILE" ]; then
        echo  "CDS_LIC_FILE            is set to: \"$CDS_LIC_FILE\""
      fi
      if [ -n "$LM_LICENSE_FILE" ]; then
        echo  "LM_LICENSE_FILE         is set to: \"$LM_LICENSE_FILE\""
      fi
    fi
  fi


  ####### Print warning messages and create $ocaccel_env_sh
  echo " "
  echo "======================================================="
  echo "==   Additional Environmental Variables              =="
  echo "==   Content of $(basename $ocaccel_env_sh):                      =="
  echo "======================================================="
  cat $ocaccel_env_sh
  echo  "======================================================="

  RC=0
  if [ -n "$SETUP_WARNING" ]; then
    RC=1
    echo  -e "$SETUP_WARNING"
#echo  -e "\nPlease fix the required environment settings to the file $(basename $ocaccel_env_sh)"
#echo  -e "All of the variables above have to be filled with the correct and valid values."
  fi

  if [ "$ocaccel_env_info" == "y" ] && [ -n "$SETUP_INFO" ]; then
    echo  -e "$SETUP_INFO"
  fi

  if [ -n "$SETUP_EMPTY" ]; then
    let "RC = 2 - $RC"
    echo  -e "\nThe following environment variables need to get defined:$SETUP_EMPTY"
    echo  -e "Please edit $(basename $ocaccel_env_sh) and add the correct values"
  fi
  echo 

  SETUP_DONE="1"
done

if [ -z "$ocaccel_env_info" ]; then
  if [ "$0" == "bash" ]; then
    # return value in case that this file was sourced
    return $RC
  else
    # otherwise set an exit state
    exit $RC
  fi
fi
