#!/bin/bash
#
# Copyright 2017 International Business Machines
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version=1.0
program=$(basename "$0")
prgdir=$(dirname $(readlink -f "$BASH_SOURCE")) # path containing this script
ocaccel_root=$(dirname "$prgdir")

# output formatting
bold=$(tput bold)
normal=$(tput sgr0)

# Name of global config file
build_dir="$prgdir/build"
kconfig="$prgdir/Kconfig"
config="$build_dir/config"
ocaccel_config="$ocaccel_root/.ocaccel_config"
ocaccel_config_sh="$ocaccel_config".sh
ocaccel_config_cflags="$ocaccel_config".cflags
autoconf=$ocaccel_root/software/include/autoconf.h
option=menuconfig

# Print usage message helper function
function usage() {
  echo  "Usage: ${program} [OPTIONS]"
  echo  "    [-o <oldconfig/menuconfig/...>] Use this as option."
  echo  "    [-c <config>]        Copy results to this config file."
  echo  "    [-a <autoconf>]    Location of autoconf.h."
  echo  "    [-V] Print program version (${version})"
  echo  "    [-h] Print this help message."
  echo  "    <path-to-bit-file>"
  echo
  echo  "Utility to generate vivado_hls tcl configuration file."
  echo
}

# Parse any options given on the command line
while getopts ":a:o:c:Vh" opt; do
  case ${opt} in
      a)
      autoconf=$OPTARG
      ;;
      o)
      option=$OPTARG
      ;;
      c)
      ocaccel_config=$OPTARG
      ocaccel_config_sh=$OPTARG.sh
      ocaccel_config_cflags=$OPTARG.cflags
      ;;
      V)
      echo  "${version}" >/dev/null
      exit 0
      ;;
      h)
      usage;
      exit 0
      ;;
      \?)
      printf "${bold}ERROR:${normal} Invalid option: -${OPTARG}\n"
      exit 1
      ;;
      :)
      printf "${bold}ERROR:${normal} Option -$OPTARG requires an argument.\n"
      exit 1
      ;;
  esac
done

echo  "OCACCEL Build Options" >/dev/null
echo  "  Kconfig:          $kconfig" >/dev/null
echo  "  Build directory:  $build_dir" >/dev/null
echo  "  config:           $ocaccel_config" >/dev/null
echo  "  autoconf:         $autoconf" >/dev/null

if [ ! -e $build_dir ]; then
  echo  "Cloning kconfig from github.com/guillon/kconfig into $build_dir" >/dev/null
  git clone https://github.com/guillon/kconfig $build_dir
  if [ $? != 0 ]; then
      printf "FAILED: git clone https://github.com/guillon/kconfig $build_dir"
      exit 1
  fi
fi
if [ -e $ocaccel_config ]; then
  cp -p $ocaccel_config $config
else
  rm -f $config
fi

cmd="make -C $build_dir -f GNUmakefile TOPDIR=. SRCDIR=. KBUILD_KCONFIG=$kconfig $option"

echo  "Executing:" >/dev/null
echo  "  $cmd" >/dev/null
$cmd 2>/dev/null

if [[ $? != 0 ]]; then
    echo "Make kconfig failed!"
    exit 1
fi

echo  "Generating OCACCEL config files $ocaccel_config, $ocaccel_config_sh and $ocaccel_config_cflags ..."
cp $config $ocaccel_config
cat $ocaccel_config | sed 's/^\([^#].*\)/export \1/' | tr -d '"' > $ocaccel_config_sh
chmod +x $ocaccel_config_sh
cat $ocaccel_config | tr -d '"' | sed 's/^\([^#].*\)/OCACCEL_CFLAGS += "-DCONFIG_\1"/' > $ocaccel_config_cflags
echo  "Generation of OCACCEL config files done."
echo

if [ -f $build_dir/include/linux/autoconf.h ]; then
  echo  "Copy resulting $autoconf file ..."
  cp $build_dir/include/linux/autoconf.h $autoconf
fi
